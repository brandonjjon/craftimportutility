{# @var craft \craft\web\twig\variables\CraftVariable #}
{#
/**
 * RegistrarImporterCraft plugin for Craft CMS 3.x
 *
 * RegistrarImporterCraft index.twig
 *
 * @author    T Luce
 * @copyright Copyright (c) 2023 T Luce
 * @link      https://tdlacct.github.io/
 * @package   RegistrarImporterCraft
 * @since     1.0.0
 */
#}

{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}


{# The title of this CP section #}
{% set title = "RegistrarImporterCraft" %}

{# The URL to this plugin's base CP section #}
{% set pluginCpUrl = url('hr-commencement-import-utility') %}


{# The content of the CP Section#}
{% set content %}
    
    <style>
        .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: #f1f1f1;
        }
        .tab button {
        background-color: inherit;
        float: left;
        border: none;
        outline: none;
        cursor: pointer;
        padding: 14px 16px;
        transition: 0.3s;
        }

        /* Change background color of buttons on hover */
        .tab button:hover {
        background-color: #ddd;
        }

        .active-tab {
        background-color: #ccc !important;
        }

        /* Style the tab content */
        .tabcontent {
        display: none;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-top: none;
        }
    </style>
    <h1>Importer Draft V2</h1>
    
    <p class="textline"></p>
    <div style="padding: 10px 0;">
        <h2>File Upload</h2>
        <div style="display: inline;">
        <label for="files">Select asset:</label>
        <div id="asset-settings" folderId="{{craft.app.getPlugins().getPlugin('_hr-commencement-import-utility').getSettings().folderId}}" ></div>
        <select name="files" id="file-dropdown" onchange="checkDropdown(this)" style="border: 1px solid black">
            <option value="">None</option>
            {% for asset in craft.assets.all() %}
                {% if asset.extension == "xls" or asset.extension == "xlsx" %}
                    <option value="{{ asset.filename }}">{{ asset.filename }}</option>
                {% endif %}
            {% endfor %}
            <option value="new">New File...</option>
        </select>
        <select name="state" id="data-type" onChange="checkDropdown(this)" style="border: 1px solid black">
                    <option value="honor-roll">Honor Roll</option>
                    <option value="commencement">Commencement</option>
        </select>
        </div>
    
        <div id="file-input-box" style="display: none; padding: 10px 0 10px 0;">
            <input type="file" id="file-input" accept=".xls,.xlsx" />
            <div style="padding: 10px 0 10px 0;" >
                <button 
                class="btn" 
                id="preview-button" 
                data-user-id="{{ currentUser.id }}" 
                data-csrfdata="{{ craft.app.request.getCsrfToken() }}"  
                data-csrfname="{{ craft.app.config.general.csrfTokenName }}"
                folderId="{{craft.app.getPlugins().getPlugin('_hr-commencement-import-utility').getSettings().folderId}}" 
                fieldId="{{craft.app.getPlugins().getPlugin('_hr-commencement-import-utility').getSettings().fieldId}}">Upload File</button>
            </div>
        </div>
    </div>
    <div id="loading" style="display: none;">
        <h2>Loading...</h2>
    </div>
    <div id="error" style="display: none;">
        <h2>An error occured. Please check that the spreadsheet you uploaded is valid for Commencement or Honor Roll.</h2>
    </div>
    <div id="options" style="display: none;" >
    <!--
    <div>
        <input default type="radio" id="honorroll" name="sheet" value="honorroll">
        <label for="honorroll">Honor Roll</label>
        <input type="radio" id="comm" name="sheet" value="comm">
        <label for="comm">Commencement</label>
    </div>
    -->
    <div class="tab">
        <button  onclick="initMapping()">View Spreadsheet</button>
        <button  onClick="switchTabs('tab-html')" data-user-id="{{ currentUser.id }}" data-csrfdata="{{ craft.app.request.getCsrfToken() }}"  data-csrfname="{{ craft.app.config.general.csrfTokenName }}">Generate HTML</button>
        <button  onClick="switchTabs('tab-press')">Generate Press Release</button>
    </div>

    <div id="tab-spreadsheet" class="tabcontent">
    </div>
    <div id="tab-html" class="tabcontent">
        <div class="tab">
            <button class="btn"  onclick="changeOutput(this)">View Code</button>
            <button class="btn"  onclick="copyToClipboard(output[1])">Copy to Clipboard</button>
        </div>
        <div style="height: 512px; overflow-y: scroll;">
            <div id='preview-html'>
            </div>
        </div>

    </div>

    <div id="tab-press" class="tabcontent">
        <div class="tab">
            <button class="btn"  onclick="copyDivToClipboard('preview-press')">Copy to Clipboard</button>
        </div>
        <div style="height: 512px; overflow-y: scroll;">
            <div id='preview-press'>
            </div>
    </div>

    </div>

      
    </div>
    <!--
    <div style="padding: 10px 0 10px 0;" >
        <button class="btn" onClick="generateOutput()" data-user-id="{{ currentUser.id }}" data-csrfdata="{{ craft.app.request.getCsrfToken() }}"  data-csrfname="{{ craft.app.config.general.csrfTokenName }}">Preview File</button>
    </div>
    -->
    




    
    {{ csrfInput() }}
 
    <script>
        const button = document.getElementById('preview-button');
        const dropdown = document.getElementById('file-dropdown');
        const previewHTML = document.getElementById('preview-html');
        const previewPress = document.getElementById('preview-press');
        const fileinputbox = document.getElementById('file-input-box');
        const options = document.getElementById('options');
        const loading = document.getElementById('loading');
        const error = document.getElementById('error');
        const commtable = document.getElementById('comm-table');
        
        const datatype = document.getElementById('data-type');
        const comm = ["State","City","First Name","Last Name", "Diploma Name", "Country","Division","Degree","Major 1","Major 2"];
        const honorroll = ["State","City","First Name","Last Name"];
        
        let json = {};
        let sortedjson = {};

        
        let statevalue = "";
        let cityvalue = "";
        let firstnamevalue = "";
        let lastnamevalue = "";
        let diplomanamevalue = ""
        let countryvalue = "";
        let divisionvalue = "";
        let degreevalue = "";
        let majoronevalue = "";
        let majortwovalue = "";


        let output = "";

        let displayCode = true;

        function checkDropdown() {

            if (dropdown.value == '') {
                return;
            }

            if (dropdown.value == 'new') {
                fileinputbox.style.display = "block";
            } else {
                fileinputbox.style.display = "none";
                preview(dropdown.value);
            }
        }

        button.addEventListener('click', function on(e) {
            let selectedFile = document.getElementById('file-input').files[0];
            const params = new FormData();

            params.append('userId', button.dataset.userId);
            params.append(button.dataset.csrfname, button.dataset.csrfdata);
            params.append('folderId',button.dataset.folderId);
            params.append('fieldId',button.dataset.fieldId);
            params.append('assets-upload',selectedFile);
            console.log(params);
            if (dropdown.value == 'new') {
                fetch('/actions/assets/upload/', {
                    method: 'POST',
                        headers: {
                        'Accept': 'application/json',
                    },
                    body: params,
                    }).then((response) => response.json())
                    console.log(response);
                    .then((data) => preview(data.filename));
            } else {
                preview(dropdown.value);
            }
            
        });

        function copyToClipboard(value) {
            navigator.clipboard.writeText(value);
        }

        function copyDivToClipboard(divId) {
            navigator.clipboard.writeText(document.getElementById(divId).innerText);
        }

        function preview(filename) {
            if (dropdown.value == '') {
                return;
            }
            loading.style.display = "block";
            options.style.display = "none";
            const params = new FormData();
            params.append('filepath', filename);
            try {
                fetch('/actions/_hr-commencement-import-utility/default/convert?' + new URLSearchParams({
                    path: '/var/www/web/assets/' + filename,
                }), {
                method: 'GET',
                }).then((response) => response.json())
                    .then((data) => {
                    json = data;
                    initMapping();
                });
            } catch (error) {
                error.style.display = "block";
                options.style.display = "none";
                loading.style.display = "none";
            }

        }



        function generateOutput () {
            //mapValues(json)
            let title = "";
            let mode = datatype.value;

            if (datatype.value == "honor-roll") {
                title = "Dean's Honor Roll"
            } else {
                title = "Provost's Honor Roll"
            }
            const params = new FormData();
            params.append('userId', button.dataset.userId);
            params.append(button.dataset.csrfname, button.dataset.csrfdata);
            params.append('data', JSON.stringify(sortedjson));
            params.append('title',title);
            params.append('datamode',mode)
            
            try {
                fetch('/actions/_hr-commencement-import-utility/default/sort', {
                method: 'POST',
                body: params,
                }).then((response) => response.json())
                    .then((data) => {
                        output = data;
                        previewHTML.innerHTML = data[1];
                        previewPress.innerHTML = data[2];

                }); 
            } catch (error) {
                error.style.display = "block";
                options.style.display = "none";
                loading.style.display = "none"; 
            }
        }

        function switchTabs(activeTab) {
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            let tab = document.getElementById(activeTab);
            tab.style.display = "block";
        }

        function changeOutput(text) {
            if (displayCode) {
                previewHTML.innerHTML = output[0];
                displayCode = false;
                text.innerHTML = "View Text"
            } else {
                previewHTML.innerHTML = output[1];
                displayCode = true;
                text.innerHTML = "View Code"
            }
        }

        function initMapping() {
            let entries = Object.entries(json[0]);
            if (statevalue == "" && cityvalue == "" && firstnamevalue == "" && lastnamevalue == "") {
                if (entries.some(entry => entry.includes('State'))) {
                    statevalue = 'State';
                } else {
                    statevalue = entries[0];
                }
                
                if (entries.some(entry => entry.includes('City'))) {
                    cityvalue = 'City';
                } else {
                    cityvalue = entries[0];
                }

                if (entries.some(entry => entry.includes('First Name'))) {
                    firstnamevalue = 'First Name';
                } else {
                    firstnamevalue = entries[0];
                }

                if (entries.some(entry => entry.includes('Last Name'))) {
                    lastnamevalue = 'Last Name';
                } else {
                    lastnamevalue = entries[0];
                }

                if (entries.some(entry => entry.includes('Diploma Name'))) {
                    diplomanamevalue = 'Diploma Name';
                } else {
                    diplomanamevalue = entries[0];
                }

                if (entries.some(entry => entry.includes('Country'))) {
                    countryvalue = 'Country';
                } else {
                    countryvalue = entries[0];
                }

                if (entries.some(entry => entry.includes('Division'))) {
                    divisionvalue = 'Division';
                } else {
                    divisionvalue = entries[0];
                }

                if (entries.some(entry => entry.includes('Degree'))) {
                    degreevalue = 'Degree';
                } else {
                    degreevalue = entries[0];
                }

                if (entries.some(entry => entry.includes('Major 1'))) {
                    majoronevalue = 'Major 1';
                } else {
                    majoronevalue = entries[0];
                }
                
                if (entries.some(entry => entry.includes('Major 2'))) {
                    majortwovalue = 'Major 2';
                } else {
                    majortwovalue = entries[0];
                }

            }
            mapValues(json,null)
            switchTabs("tab-spreadsheet")
            loading.style.display = "none";
            options.style.display = "block";

        }

          
        function mapValues (data,dropdown) {
            if (dropdown != null) {
                const selectedOption = dropdown.options[dropdown.selectedIndex];
                const select = JSON.parse(selectedOption.value);
                switch(select[0]) {
                    case "State":
                        statevalue = select[1];
                        break;
                    case "City":
                        cityvalue = select[1];
                        break;
                    case "First Name":
                        firstnamevalue = select[1];
                        break;
                    case "Last Name":
                        lastnamevalue = select[1];
                        break;
                    case "Diploma Name":
                        diplomanamevalue = select[1];
                        break;
                    case "Country":
                        countryvalue = select[1];
                        break;
                    case "Division":
                        divisionvalue = select[1];
                        break;
                    case "Degree":
                        degreevalue = select[1];
                        break;
                    case "Major 1":
                        majoronevalue = select[1];
                        break;
                    case "Major 2":
                        majortwovalue = select[1];
                        break;
                    default:
                        break;
                }
            }

            let mappeddata = [];
            data.forEach(element =>  { 
                if (datatype.value == "honor-roll") {
                    let tempobj = {
                        "State" : element[statevalue],
                        "City": element[cityvalue],
                        "First Name": element[firstnamevalue],
                        "Last Name": element[lastnamevalue]
                    }
                    mappeddata.push(tempobj);
                } else {
                    let tempobj = {
                        "State" : element[statevalue],
                        "City": element[cityvalue],
                        "First Name": element[firstnamevalue],
                        "Last Name": element[lastnamevalue],
                        "Diploma Name": element[diplomanamevalue],
                        "Country" : element[countryvalue],
                        "Division" : element[divisionvalue],
                        "Degree" : element[degreevalue],
                        "Major 1" : element[majoronevalue],
                        "Major 2" : element[majortwovalue]
                    }
                    mappeddata.push(tempobj);
                }
            });
            sortedjson = mappeddata;
            generateOutput();
            generateTable();
        }

        function generateTable() {
            
            let body = document.getElementById("tab-spreadsheet");
            body.innerHTML = "";
            let tbl = document.createElement('table');
            const tr = tbl.insertRow();
            const selecttr = tbl.insertRow();

            let tbldata = [];

            if (datatype.value == "honor-roll") {
                tbldata = honorroll;
            } else {
                tbldata = comm;
            }

            tbldata.forEach(element => {
                 const td = tr.insertCell();
                 td.appendChild(document.createTextNode(element));
                 
                 let selecttd = selecttr.insertCell();
                 let dropdown = document.createElement("select");
                 
                
                for (const [key, value] of Object.entries(json[0])) {
                    let option = document.createElement("option");
                    option.text = key;
                    option.value = JSON.stringify([element, key]);
                    dropdown.appendChild(option);

                    switch(element) {
                        case "State":
                            if (key == statevalue) {
                                option.selected = "selected";
                            }
                            break;
                        case "City":
                            if (key == cityvalue) {
                                option.selected = "selected";
                            }
                            break;
                        case "First Name":
                            if (key == firstnamevalue) {
                                option.selected = "selected";
                            }
                            break;
                        case "Last Name":
                            if (key == lastnamevalue) {
                                option.selected = "selected";
                            }
                            break;
                        case "Diploma Name":
                            if (key == diplomanamevalue) {
                                option.selected = "selected";
                            }
                            break;
                        case "Country":
                            if (key == countryvalue) {
                                option.selected = "selected";
                            }
                            break;
                        case "Division":
                            if (key == divisionvalue) {
                                option.selected = "selected";
                            }
                            break;
                        case "Degree":
                            if (key == degreevalue) {
                                option.selected = "selected";
                            }
                            break;
                        case "Major 1":
                            if (key == majoronevalue) {
                                option.selected = "selected";
                            }
                            break;
                        case "Major 2":
                            if (key == majortwovalue) {
                                option.selected = "selected";
                            }
                            break;
                        default:
                            break;
                    }
                }


                dropdown.onchange = () => mapValues(json,dropdown);
                selecttd.appendChild(dropdown);
            });

            for (i = 0; i < 15; i++) {
                const tr = tbl.insertRow();
                for (const [key, value] of Object.entries(sortedjson[i])) {
                    const td = tr.insertCell();
                    td.style.opacity = 1 - i/15;
                    if (`${value}`.trim() != "") {
                        td.appendChild(document.createTextNode(`${value}`));
                    } else {
                        td.appendChild(document.createTextNode("--"));
                    }
                }
            }
            body.appendChild(tbl);
        }

    </script>
{% endset %}
